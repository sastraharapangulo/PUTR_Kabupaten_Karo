import{Q as _,b as U,at as W,au as tt,av as R,aw as et,ax as B,U as nt,ay as at,az as st,aA as it}from"./index-D805BexR.js";function D(t){if(!t)return null;const n=t.wkid;if(n)return tt[n];const e=t.wkt2??t.wkt;return e?ot(e):null}function ot(t){const n=et.exec(t);if(!n||n.length!==2)return null;const e=n[1].split(",");if(!e||e.length<3)return null;const c=parseFloat(e[1]),a=parseFloat(e[2]);return isNaN(c)||isNaN(a)?null:{a:c,f:a===0?0:1/a}}function E(t){const n=D(t);if(rt(n))return n;const e=n.a*(1-n.f);return Object.assign(n,{b:e,eSq:1-(e/n.a)**2,radius:(2*n.a+e)/3,densificationRatio:1e4/((2*n.a+e)/3)})}function rt(t){return t!=null&&"b"in t&&"eSq"in t&&"radius"in t}function C(t,n,e){const{a:c,eSq:a}=E(e),s=Math.sqrt(a),i=Math.sin(n[1]*R),l=c*n[0]*R;let r;return a>0?r=c*((1-a)*(i/(1-a*(i*i))-1/(2*s)*Math.log((1-s*i)/(1+s*i))))*.5:r=c*i,t[0]=l,t[1]=r,t}function G(t){return _(t)&&!!D(t)}function lt(t,n="square-meters"){if(t.some(i=>!G(i.spatialReference)))throw new U("geodesic-areas:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let i=0;i<t.length;i++){const l=t[i],r=l.spatialReference,{radius:h,densificationRatio:u}=E(r),o=h*u;e.push(ht(l,o))}const c=[],a=[0,0],s=[0,0];for(let i=0;i<e.length;i++){const{rings:l,spatialReference:r}=e[i];let h=0;for(let u=0;u<l.length;u++){const o=l[u];C(a,o[0],r),C(s,o[o.length-1],r);let M=s[0]*a[1]-a[0]*s[1];for(let d=0;d<o.length-1;d++)C(a,o[d+1],r),C(s,o[d],r),M+=s[0]*a[1]-a[0]*s[1];h+=M}h=W(h,"square-meters",n),c.push(h/-2)}return c}function ut(t,n="meters"){if(!t)throw new U("geodesic-lengths:invalid-geometries","the input geometries type is not supported");if(t.some(c=>!G(c.spatialReference)))throw new U("geodesic-lengths:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let c=0;c<t.length;c++){const a=t[c],{spatialReference:s}=a,i=a.type==="polyline"?a.paths:a.rings;let l=0;for(let r=0;r<i.length;r++){const h=i[r];let u=0;for(let o=1;o<h.length;o++){const M=h[o-1][0],d=h[o][0],m=h[o-1][1],g=h[o][1];if(m!==g||M!==d){const p=new H;J(p,[M,m],[d,g],s),u+=p.distance}}l+=u}l=W(l,"meters",n),e.push(l)}return e}function ht(t,n){if(t.type!=="polyline"&&t.type!=="polygon")throw new U("geodesic-densify:invalid-geometry","the input geometry is neither polyline nor polygon");const{spatialReference:e}=t;if(!G(e))throw new U("geodesic-densify:invalid-spatial-reference","the input geometry spatial reference is not supported");const c=t.type==="polyline"?t.paths:t.rings,a=[],s=[0,0],i=new H;for(const r of c){const h=[];a.push(h),h.push([r[0][0],r[0][1]]);let u,o,M=r[0][0],d=r[0][1];for(let m=0;m<r.length-1;m++){if(u=r[m+1][0],o=r[m+1][1],M===u&&d===o)continue;const g=[M,d];J(i,[M,d],[u,o],e);const{azimuth:p,distance:v}=i,w=v/n;if(w>1){for(let x=1;x<=w-1;x++)O(s,g,p,x*n,e),h.push(s.slice());O(s,g,p,(v+Math.floor(w-1)*n)/2,e),h.push(s.slice())}O(s,g,p,v,e),h.push(s.slice()),M=s[0],d=s[1]}}const l=at(B,e);return t.type==="polyline"?new st({paths:a,spatialReference:l}):new it({rings:a,spatialReference:l})}class H{constructor(n=0,e=void 0,c=void 0){this.distance=n,this.azimuth=e,this.reverseAzimuth=c}}function O(t,n,e,c,a){const s=n[0],i=n[1],l=s*R,r=i*R,h=(e??0)*R,{a:u,b:o,f:M}=E(a),d=Math.sin(h),m=Math.cos(h),g=(1-M)*Math.tan(r),p=1/Math.sqrt(1+g*g),v=g*p,w=Math.atan2(g,m),x=p*d,$=x*x,q=1-$,f=q*(u*u-o*o)/(o*o),j=1+f/16384*(4096+f*(f*(320-175*f)-768)),k=f/1024*(256+f*(f*(74-47*f)-128));let z,A,y,b=c/(o*j),F=2*Math.PI;for(;Math.abs(b-F)>1e-12;)y=Math.cos(2*w+b),z=Math.sin(b),A=Math.cos(b),F=b,b=c/(o*j)+k*z*(y+k/4*(A*(2*y*y-1)-k/6*y*(4*z*z-3)*(4*y*y-3)));const N=v*z-p*A*m,S=Math.atan2(v*A+p*z*m,(1-M)*Math.sqrt($+N*N)),P=M/16*q*(4+M*(4-3*q)),I=Math.atan2(z*d,p*A-v*z*m)-(1-P)*M*x*(b+P*z*(y+P*A*(2*y*y-1)));return t[0]=(l+I)/R,t[1]=S/R,t}function J(t,n,e,c){const a=n[0]*R,s=n[1]*R,i=e[0]*R,l=e[1]*R,{a:r,b:h,f:u,radius:o}=E(c),M=i-a,d=Math.atan((1-u)*Math.tan(s)),m=Math.atan((1-u)*Math.tan(l)),g=Math.sin(d),p=Math.cos(d),v=Math.sin(m),w=Math.cos(m);let x,$,q,f,j,k,z,A,y,b,F=1e3,N=M;do{if(z=Math.sin(N),A=Math.cos(N),q=Math.sqrt(w*z*(w*z)+(p*v-g*w*A)*(p*v-g*w*A)),q===0)return t.distance=0,t.azimuth=void 0,t.reverseAzimuth=void 0,t;j=g*v+p*w*A,k=Math.atan2(q,j),y=p*w*z/q,$=1-y*y,f=j-2*g*v/$,isNaN(f)&&(f=0),b=u/16*$*(4+u*(4-3*$)),x=N,N=M+(1-b)*u*y*(k+b*q*(f+b*j*(2*f*f-1)))}while(Math.abs(N-x)>1e-12&&--F>0);if(F===0){const T=o,V=Math.acos(Math.sin(s)*Math.sin(l)+Math.cos(s)*Math.cos(l)*Math.cos(i-a))*T,Q=i-a,X=Math.sin(Q)*Math.cos(l),Y=Math.cos(s)*Math.sin(l)-Math.sin(s)*Math.cos(l)*Math.cos(Q),Z=Math.atan2(X,Y);return t.azimuth=Z/R,t.distance=V,t.reverseAzimuth=void 0,t}const S=$*(r*r-h*h)/(h*h),P=S/1024*(256+S*(S*(74-47*S)-128)),I=h*(1+S/16384*(4096+S*(S*(320-175*S)-768)))*(k-P*q*(f+P/4*(j*(2*f*f-1)-P/6*f*(4*q*q-3)*(4*f*f-3)))),K=Math.atan2(w*Math.sin(N),p*v-g*w*Math.cos(N)),L=Math.atan2(p*Math.sin(N),p*v*Math.cos(N)-g*w);return t.azimuth=K/R,t.distance=I,t.reverseAzimuth=L/R,t}function ft(t){return G(t)?t:nt(t)?B.WGS84:null}export{ft as N,ut as R,H as b,O as j,J as q,lt as v,G as y};

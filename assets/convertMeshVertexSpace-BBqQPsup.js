import{aX as p,b as m,H as s}from"./index-D805BexR.js";import{p as n}from"./MeshVertexAttributes-DQ_wvoXL.js";import{B as a}from"./vertexSpaceConversion-DYh4m_vL.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-CgiW1lSK.js";import"./computeTranslationToOriginAndRotation-Be3doUwy.js";import"./projectPointToVector-Cltsd45V.js";import"./meshVertexSpaceUtils-Wh4dtXYr.js";import"./MeshLocalVertexSpace-t9X9xoeg.js";import"./vec3-B4uGJXxT.js";import"./BufferView-jLJ9pYV0.js";import"./vec4-PH6sKysD.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
